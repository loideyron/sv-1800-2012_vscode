{
    "uvm_object": {
        "prefix": "uvm_object",
        "context": [
            "meta.package.systemverilog",
            "source.systemverilog"
        ],
        "body": [
            "// Class: $1",
            "//",
            "class ${1:$TM_FILENAME_BASE} extends ${2:uvm_object};",
            "\t`uvm_object_utils($1);\n",
            "\t// Group: Variables\n\n",
            "\t// Group: Constraints\n\n",
            "\t// Group: Functions\n",
            "\t// Constructor: new",
            "\tfunction new(string name = \"$1\");",
            "\t\tsuper.new(name);",
            "\tendfunction: new",
            "\t$0",
            "endclass: $1\n"
        ],
        "description": "UVM object class template"
    },
    "uvm_object_with_parameters": {
        "prefix": "uvm_object_with_parameters",
        "context": [
            "meta.package.systemverilog",
            "source.systemverilog"
        ],
        "body": [
            "// Class: $1",
            "//",
            "class ${1:$TM_FILENAME_BASE} #(${2:parameters}) extends ${3:uvm_object};",
            "\ttypedef $1 #(${2/(\\b(parameter|type)\\s+([A-Za-z_][A-Za-z0-9_$]*)(\\s*=\\s*([A-Za-z0-9_$]+))?)*\\b/$3/g}) this_type_t;",
            "\t`uvm_object_param_utils(this_type_t);\n",
            "\t// Group: Variables\n\n",
            "\t// Group: Constraints\n\n",
            "\t// Group: Functions\n",
            "\t// Constructor: new",
            "\tfunction new(string name = \"$1\");",
            "\t\tsuper.new(name);",
            "\tendfunction: new",
            "\t$0",
            "endclass: $1\n"
        ],
        "description": "UVM parametrized object class template"
    },

    "uvm_component": {
        "prefix": "uvm_component",
        "context": [
            "meta.package.systemverilog",
            "source.systemverilog"
        ],
        "body": [
            "// Class: $1",
            "//",
            "class ${1:$TM_FILENAME_BASE} extends ${2:uvm_component};",
            "\t`uvm_component_utils($1);\n",
            "\t// Group: Configuration Object(s)\n",
            "\t// Var: config_obj",
            "\t${3:config_obj_t} config_obj;\n\n",
            "\t// Group: Components\n\n",
            "\t// Group: Variables\n\n",
            "\t// Group: Functions\n",
            "\t// Constructor: new",
            "\tfunction new(string name = \"$1\", uvm_component parent);",
            "\t\tsuper.new(name, parent);",
            "\tendfunction: new\n",
            "\t$0",
            "endclass: $1\n"
        ],
        "description": "UVM component class template"
    },
    "uvm_component_with_parameters": {
        "prefix": "uvm_component_with_parameters",
        "context": [
            "meta.package.systemverilog",
            "source.systemverilog"
        ],
        "body": [
            "// Class: $1",
            "//",
            "class ${1:$TM_FILENAME_BASE} #(${2:parameters}) extends ${3:uvm_component};",
            "\ttypedef $1 #(${2/(\\b(parameter|type)\\s+([A-Za-z_][A-Za-z0-9_$]*)(\\s*=\\s*([A-Za-z0-9_$]+))?)*\\b/$3/g}) this_type_t;",
            "\t`uvm_component_param_utils(this_type_t);\n",
            "\t// Group: Configuration Object(s)\n",
            "\t// Var: config_obj",
            "\t${4:config_obj_t} config_obj;\n\n",
            "\t// Group: Components\n\n",
            "\t// Group: Variables\n\n",
            "\t// Constructor: new",
            "\tfunction new(string name = \"$1\", uvm_component parent);",
            "\t\tsuper.new(name, parent);",
            "\tendfunction: new\n",
            "\t$0",
            "endclass: $1\n"
        ],
        "description": "UVM parametrized component class template"
    },
    "uvm_component_extended": {
        "prefix": "uvm_component_extended",
        "context": [
            "meta.package.systemverilog",
            "source.systemverilog"
        ],
        "body": [
            "// Class: $1",
            "//",
            "class ${1:$TM_FILENAME_BASE} extends ${2:base_class};",
            "\t`uvm_component_utils($1);\n",
            "\t// Group: Configuration Object(s)\n\n",
            "\t// Group: Components\n\n",
            "\t// Group: Variables\n\n",
            "\t// Group: Functions\n",
            "\t// Constructor: new",
            "\tfunction new(string name = \"$1\", uvm_component parent);",
            "\t\tsuper.new(name, parent);",
            "\tendfunction: new\n",
            "\t/*---  UVM Build Phases            ---*/",
            "\t/*------------------------------------*/",
            "\t// Function: build_phase",
            "\textern function void build_phase(uvm_phase phase);",
            "\t// Function: connect_phase",
            "\textern function void connect_phase(uvm_phase phase);",
            "\t// Function: end_of_elaboration_phase",
            "\textern function void end_of_elaboration_phase(uvm_phase phase);\n",
            "\t/*---  UVM Run Phases              ---*/",
            "\t/*------------------------------------*/",
            "\t// Function: start_of_simulation_phase",
            "\textern function void start_of_simulation_phase(uvm_phase phase);",
            "\t// Function: reset_phase",
            "\textern task reset_phase(uvm_phase phase);",
            "\t// Function: configure_phase",
            "\textern task configure_phase(uvm_phase phase);",
            "\t// Function: main_phase",
            "\textern task main_phase(uvm_phase phase);",
            "\t// Function: shutdown_phase",
            "\textern task shutdown_phase(uvm_phase phase);\n",
            "\t/*---  UVM Cleanup Phases          ---*/",
            "\t/*------------------------------------*/",
            "\t// Function: extract_phase",
            "\textern function void extract_phase(uvm_phase phase);",
            "\t// Function: report_phase",
            "\textern function void report_phase(uvm_phase phase);",
            "\t$0",
            "endclass: $1\n\n",
            "/*----------------------------------------------------------------------------*/",
            "/*  UVM Build Phases                                                          */",
            "/*----------------------------------------------------------------------------*/",
            "function void $1::build_phase(uvm_phase phase);",
            "\t/*  note: Do not call super.build_phase() from any class that is extended from an UVM base class!  */",
            "\t/*  For more information see UVM Cookbook v1800.2 p.503  */",
            "\t// super.build_phase(phase);",
            "endfunction: build_phase\n\n",
            "function void $1::connect_phase(uvm_phase phase);",
            "\tsuper.connect_phase(phase);",
            "endfunction: connect_phase\n\n",
            "function void $1::end_of_elaboration_phase(uvm_phase phase);",
            "\tsuper.end_of_elaboration_phase(phase);",
            "endfunction: end_of_elaboration_phase\n\n",
            "/*----------------------------------------------------------------------------*/",
            "/*  UVM Run Phases                                                            */",
            "/*----------------------------------------------------------------------------*/",
            "function void $1::start_of_simulation_phase(uvm_phase phase);",
            "\tsuper.start_of_simulation_phase(phase);",
            "endfunction: start_of_simulation_phase\n\n",
            "task $1::reset_phase(uvm_phase phase);",
            "endtask: reset_phase\n\n",
            "task $1::configure_phase(uvm_phase phase);",
            "endtask: configure_phase\n\n",
            "task $1::main_phase(uvm_phase phase);",
            "endtask: main_phase\n\n",
            "task $1::shutdown_phase(uvm_phase phase);",
            "endtask: shutdown_phase\n\n",
            "/*----------------------------------------------------------------------------*/",
            "/*  UVM Cleanup Phases                                                        */",
            "/*----------------------------------------------------------------------------*/",
            "function void $1::report_phase(uvm_phase phase);",
            "\tsuper.report_phase(phase);",
            "endfunction: report_phase\n\n",
            "function void $1::extract_phase(uvm_phase phase);",
            "\tsuper.extract_phase(phase);",
            "endfunction: extract_phase\n\n"
        ],
        "description": "UVM component class extended template"
    },

    "uvm_sequence": {
        "prefix": "uvm_sequence",
        "context": [
            "meta.package.systemverilog",
            "source.systemverilog"
        ],
        "body": [
            "// Class: $1",
            "//",
            "class ${1:$TM_FILENAME_BASE} extends ${2:uvm_sequence};",
            "\t`uvm_object_utils($1);\n",
            "\t// Group: Variables\n\n",
            "\t// Group: Constraints\n\n",
            "\t// Group: Functions\n",
            "\t// Constructor: new",
            "\tfunction new(string name = \"$1\");",
            "\t\tsuper.new(name);",
            "\tendfunction: new\n",
            "\t// Task: pre_start",
            "\t// This task is a user-definable callback that is called before the optional ",
            "\t// execution of <pre_body>.",
            "\t// extern virtual task pre_start();\n",
            "\t// Task: pre_body",
            "\t// This task is a user-definable callback that is called before the execution ",
            "\t// of <body> ~only~ when the sequence is started with <start>.",
            "\t// If <start> is called with ~call_pre_post~ set to 0, ~pre_body~ is not called.",
            "\t// extern virtual task pre_body();\n",
            "\t// Task: pre_do",
            "\t// This task is a user-definable callback task that is called ~on the parent ",
            "\t// sequence~, if any. The sequence has issued a wait_for_grant() call and after",
            "\t// the sequencer has selected this sequence, and before the item is randomized.",
            "\t//",
            "\t// Although pre_do is a task, consuming simulation cycles may result in unexpected",
            "\t// behavior on the driver.",
            "\t// extern virtual task pre_do(bit is_item);\n",
            "\t// Function: mid_do",
            "\t// This function is a user-definable callback function that is called after the ",
            "\t// sequence item has been randomized, and just before the item is sent to the ",
            "\t// driver.",
            "\t// extern virtual function void mid_do(uvm_sequence_item this_item);\n",
            "\t// Task: body",
            "\t// This is the user-defined task where the main sequence code resides.",
            "\textern virtual task body();\n",
            "\t// Function: post_do",
            "\t// This function is a user-definable callback function that is called after the ",
            "\t// driver has indicated that it has completed the item, using either this ",
            "\t// item_done or put methods. ",
            "\t// extern virtual function void post_do(uvm_sequence_item this_item);\n",
            "\t// Task: post_body",
            "\t// This task is a user-definable callback task that is called after the execution ",
            "\t// of <body> ~only~ when the sequence is started with <start>.",
            "\t// If <start> is called with ~call_pre_post~ set to 0, ~post_body~ is not called.",
            "\t// extern virtual task post_body();\n",
            "\t// Task: post_start",
            "\t// This task is a user-definable callback that is called after the optional ",
            "\t// execution of <post_body>.",
            "\t// extern virtual task post_start();",
            "\t$0",
            "endclass: $1"
        ],
        "description": "UVM sequence class template"
    },
    "uvm_sequence_with_parameters": {
        "prefix": "uvm_sequence_with_parameters",
        "context": [
            "meta.package.systemverilog",
            "source.systemverilog"
        ],
        "body": [
            "// Class: $1",
            "//",
            "class ${1:$TM_FILENAME_BASE} #(${2:parameters}) extends ${3:uvm_sequence};",
            "\ttypedef $1 #(${2/(\\b(parameter|type)\\s+([A-Za-z_][A-Za-z0-9_$]*)(\\s*=\\s*([A-Za-z0-9_$]+))?)*\\b/$3/g}) this_type_t;",
            "\t`uvm_object_param_utils(this_type_t);\n",
            "\t// Group: Variables\n\n",
            "\t// Group: Constraints\n\n",
            "\t// Group: Functions\n",
            "\t// Constructor: new",
            "\tfunction new(string name = \"$1\");",
            "\t\tsuper.new(name);",
            "\tendfunction: new\n",
            "\t// Task: pre_start",
            "\t// This task is a user-definable callback that is called before the optional ",
            "\t// execution of <pre_body>.",
            "\t// extern virtual task pre_start();\n",
            "\t// Task: pre_body",
            "\t// This task is a user-definable callback that is called before the execution ",
            "\t// of <body> ~only~ when the sequence is started with <start>.",
            "\t// If <start> is called with ~call_pre_post~ set to 0, ~pre_body~ is not called.",
            "\t// extern virtual task pre_body();\n",
            "\t// Task: pre_do",
            "\t// This task is a user-definable callback task that is called ~on the parent ",
            "\t// sequence~, if any. The sequence has issued a wait_for_grant() call and after",
            "\t// the sequencer has selected this sequence, and before the item is randomized.",
            "\t//",
            "\t// Although pre_do is a task, consuming simulation cycles may result in unexpected",
            "\t// behavior on the driver.",
            "\t// extern virtual task pre_do(bit is_item);\n",
            "\t// Function: mid_do",
            "\t// This function is a user-definable callback function that is called after the ",
            "\t// sequence item has been randomized, and just before the item is sent to the ",
            "\t// driver.",
            "\t// extern virtual function void mid_do(uvm_sequence_item this_item);\n",
            "\t// Task: body",
            "\t// This is the user-defined task where the main sequence code resides.",
            "\textern virtual task body();\n",
            "\t// Function: post_do",
            "\t// This function is a user-definable callback function that is called after the ",
            "\t// driver has indicated that it has completed the item, using either this ",
            "\t// item_done or put methods. ",
            "\t// extern virtual function void post_do(uvm_sequence_item this_item);\n",
            "\t// Task: post_body",
            "\t// This task is a user-definable callback task that is called after the execution ",
            "\t// of <body> ~only~ when the sequence is started with <start>.",
            "\t// If <start> is called with ~call_pre_post~ set to 0, ~post_body~ is not called.",
            "\t// extern virtual task post_body();\n",
            "\t// Task: post_start",
            "\t// This task is a user-definable callback that is called after the optional ",
            "\t// execution of <post_body>.",
            "\t// extern virtual task post_start();",
            "\t$0",
            "endclass: $1"
        ],
        "description": "UVM sequence class template with parameters"
    },
    "uvm_sequence_functions": {
        "prefix": "uvm_sequence_functions",
        "context": [
            "meta.package.systemverilog",
            "source.systemverilog"
        ],
        "body": [
            "// task ${1:$TM_FILENAME_BASE::}pre_start();",
            "// endtask: pre_start\n\n",
            "// task $1pre_body();",
            "// endtask: pre_body\n\n",
            "// task $1pre_do(bit is_item);",
            "// endtask: pre_do\n\n",
            "// function void $1mid_do(uvm_sequence_item this_item);",
            "// endfunction: mid_do\n\n",
            "task $1body();",
            "\t$0",
            "endtask: body\n\n",
            "// function void $1post_do(uvm_sequence_item this_item);",
            "// endfunction: post_do\n\n",
            "// task $1post_body();",
            "// endtask: post_body\n\n",
            "// task $1post_start();",
            "// endtask: post_start\n"
        ],
        "description": "UVM Sequence class functions"
    },

    "uvm_sequence_item": {
        "prefix": "uvm_sequence_item",
        "context": [
            "meta.package.systemverilog",
            "source.systemverilog"
        ],
        "body": [
            "// Class: $1",
            "//",
            "class ${1:$TM_FILENAME_BASE} extends ${2:uvm_sequence_item};",
            "\ttypedef $1 this_type_t;",
            "\t`uvm_object_utils($1);\n",
            "\t// Group: Variables\n\n",
            "\t// Group: Constraints\n\n",
            "\t// Group: Functions\n",
            "\t// Constructor: new",
            "\tfunction new(string name = \"$1\");",
            "\t\tsuper.new(name);",
            "\tendfunction: new\n",
            "\t// Function: do_copy",
            "\t// extern function void do_copy(uvm_object rhs);",
            "\t// Function: do_compare",
            "\t// extern function bit do_compare(uvm_object rhs, uvm_comparer comparer);",
            "\t// Function: convert2string",
            "\t// extern function string convert2string();",
            "\t// Function: do_print",
            "\t// extern function void do_print(uvm_printer printer);",
            "\t// Function: do_record",
            "\t// extern function void do_record(uvm_recorder recorder);",
            "\t// Function: do_pack",
            "\t// extern function void do_pack();",
            "\t// Function: do_unpack",
            "\t// extern function void do_unpack();",
            "\t$0",
            "endclass: $1\n\n",
            "/*----------------------------------------------------------------------------*/",
            "/*  Constraints                                                               */",
            "/*----------------------------------------------------------------------------*/",
            "\n\n\n",
            "/*----------------------------------------------------------------------------*/",
            "/*  Functions                                                                 */",
            "/*----------------------------------------------------------------------------*/",
            "\n"
        ],
        "description": "UVM sequence item class template"
    },
    "uvm_sequence_item_with_parameters": {
        "prefix": "uvm_sequence_item_with_parameters",
        "context": [
            "meta.package.systemverilog",
            "source.systemverilog"
        ],
        "body": [
            "// Class: $1",
            "//",
            "class ${1:$TM_FILENAME_BASE} #(${2:parameters}) extends ${3:uvm_sequence_item};",
            "\ttypedef $1 #(${2/(\\b(parameter|type)\\s+([A-Za-z_][A-Za-z0-9_$]*)(\\s*=\\s*([A-Za-z0-9_$]+))?)*\\b/$3/g}) this_type_t;",
            "\t`uvm_object_param_utils(this_type_t);\n",
            "\t// Group: Variables\n\n",
            "\t// Group: Constraints\n\n",
            "\t// Group: Functions\n",
            "\t// Constructor: new",
            "\tfunction new(string name = \"$1\");",
            "\t\tsuper.new(name);",
            "\tendfunction: new\n",
            "\t// Function: do_copy",
            "\t// extern function void do_copy(uvm_object rhs);",
            "\t// Function: do_compare",
            "\t// extern function bit do_compare(uvm_object rhs, uvm_comparer comparer);",
            "\t// Function: convert2string",
            "\t// extern function string convert2string();",
            "\t// Function: do_print",
            "\t// extern function void do_print(uvm_printer printer);",
            "\t// Function: do_record",
            "\t// extern function void do_record(uvm_recorder recorder);",
            "\t// Function: do_pack",
            "\t// extern function void do_pack();",
            "\t// Function: do_unpack",
            "\t// extern function void do_unpack();",
            "\t$0",
            "endclass: $1\n\n",
            "/*----------------------------------------------------------------------------*/",
            "/*  Constraints                                                               */",
            "/*----------------------------------------------------------------------------*/",
            "\n\n\n",
            "/*----------------------------------------------------------------------------*/",
            "/*  Functions                                                                 */",
            "/*----------------------------------------------------------------------------*/",
            "\n"
        ],
        "description": "UVM parametrized sequence item class template"
    },

    "uvm_sequence_item_do_copy": {
        "prefix": "uvm_sequence_item_do_copy",
        "context": [
            "meta.class.systemverilog",
            "source.systemverilog"
        ],
        "body": [
            "function void ${1:$TM_FILENAME_BASE}${2:::}do_copy(uvm_object rhs);",
            "\tthis_type_t rhs_;\n",
            "\tif (!\\$cast(rhs_, rhs)) begin",
            "\t\t`uvm_error({this.get_name(), \".do_copy()\"}, \"Cast failed!\");",
            "\t\treturn;",
            "\tend",
            "\t// `uvm_info({this.get_name(), \".do_copy()\"}, \"Cast succeded.\", UVM_HIGH);\n",
            "\t/*  chain the copy with parent classes  */",
            "\tsuper.do_copy(rhs);\n",
            "\t/*  list of local properties to be copied  */",
            "\t// <this.property_name = rhs_.property_name>;",
            "endfunction: do_copy\n\n$0"
        ],
        "description": "UVM sequence item do_copy() stub"
    },
    "uvm_sequence_item_do_compare": {
        "prefix": "uvm_sequence_item_do_compare",
        "context": [
            "meta.class.systemverilog",
            "source.systemverilog"
        ],
        "body": [
            "function bit ${1:$TM_FILENAME_BASE}${2:::}do_compare(uvm_object rhs, uvm_comparer comparer);",
            "\tthis_type_t rhs_;\n",
            "\tif (!\\$cast(rhs_, rhs)) begin",
            "\t\t`uvm_error({this.get_name(), \".do_compare()\"}, \"Cast failed!\");",
            "\t\treturn;",
            "\tend",
            "\t// `uvm_info({this.get_name(), \".do_compare()\"}, \"Cast succeded.\", UVM_HIGH);\n",
            "\t/*  chain the compare with parent classes  */",
            "\tdo_compare = super.do_compare(rhs, comparer);\n",
            "\t/*  list of local properties to be compared:  */",
            "\tdo_compare &= (",
            "\t\t// <this.property_name == rhs_.property_name> &&",
            "\t\t// <this.property_name == rhs_.property_name>",
            "\t);",
            "endfunction: do_compare\n\n$0"
        ],
        "description": "UVM sequence item do_compare() stub"
    },
    "uvm_sequence_item_convert2string": {
        "prefix": "uvm_sequence_item_convert2string",
        "context": [
            "meta.class.systemverilog",
            "source.systemverilog"
        ],
        "body": [
            "function string ${1:$TM_FILENAME_BASE}${2:::}convert2string();",
            "\tstring s;\n",
            "\t/*  chain the convert2string with parent classes  */",
            "\ts = super.convert2string();\n",
            "\t/*  list of local properties to be printed:  */",
            "\t// guide             0---4---8--12--16--20--24--28--32--36--40--44--48--",
            "\t// s = {s, \\$sformatf(\"property_label      : 0x%0h\\n\", property_name)};",
            "\t// s = {s, \\$sformatf(\"property_label      :   %0d\\n\", property_name)};\n",
            "\treturn s;",
            "endfunction: convert2string\n\n$0"
        ],
        "description": "UVM sequence item convert2string() stub"
    },
    "uvm_sequence_item_do_print": {
        "prefix": "uvm_sequence_item_do_print",
        "context": [
            "meta.class.systemverilog",
            "source.systemverilog"
        ],
        "body": [
            "function void ${1:$TM_FILENAME_BASE}${2:::}do_print(uvm_printer printer)",
            "\t/*  chain the print with parent classes  */",
            "\tsuper.do_print(printer);\n",
            "\t/*  list of local properties to be printed:  */",
            "\t// printer.print_string(\"property_label\", property_name);",
            "\t// printer.print_field_int(\"property_label\", property_name, \\$bits(property_name), UVM_HEX);",
            "endfunction: do_print\n\n$0"
        ],
        "description": "UVM sequence item do_print() stub"
    },
    "uvm_sequence_item_do_record": {
        "prefix": "uvm_sequence_item_do_record",
        "context": [
            "meta.class.systemverilog",
            "source.systemverilog"
        ],
        "body": [
            "function void ${1:$TM_FILENAME_BASE}${2:::}do_record(uvm_recorder recorder);",
            "\t/*  chain the record with parent classes  */",
            "\tsuper.do_record(recorder);\n",
            "\t/*  list of local properties to be recorded:  */",
            "\t/*  note: use uvm_record_int, uvm_record_string, uvm_record_time, uvm_record_real for known basic types.  */",
            "\t// `uvm_record_string(\"property_label\", property_name);",
            "\t// `uvm_record_int(\"property_label\", property_name, \\$bits(property_name), UVM_HEX);",
            "endfunction: do_record\n\n$0"
        ],
        "description": "UVM sequence item do_record() stub"
    },
    "uvm_sequence_item_do_pack": {
        "prefix": "uvm_sequence_item_do_pack",
        "context": [
            "meta.class.systemverilog",
            "source.systemverilog"
        ],
        "body": [
            "function void ${1:$TM_FILENAME_BASE}${2:::}do_pack(uvm_packer packer);",
            "\t/*  chain the pack with parent classes  */",
            "\tsuper.do_pack(packer);\n",
            "\t/*  list of local properties to be packed:  */",
            "\t// note: look up the appropriate macro(s) for your properties!",
            "\t// `uvm_pack_int(property_name);",
            "\t// `uvm_pack_queue(property_name);",
            "\t// `uvm_pack_string(property_name);",
            "endfunction: do_pack\n\n$0"
        ],
        "description": "Compresses object contents into a bit format."
    },
    "uvm_sequence_item_do_unpack": {
        "prefix": "uvm_sequence_item_do_unpack",
        "context": [
            "meta.class.systemverilog",
            "source.systemverilog"
        ],
        "body": [
            "function void ${1:$TM_FILENAME_BASE}${2:::}do_unpack(uvm_packer packer);",
            "\t/*  chain the unpack with parent classes  */",
            "\tsuper.do_unpack(packer);\n",
            "\t/*  list of local properties to be unpacked:  */",
            "\t// note: look up the appropriate macro(s) for your properties!",
            "\t// `uvm_unpack_int(property_name);",
            "\t// `uvm_unpack_queue(property_name);",
            "\t// `uvm_unpack_string(property_name);",
            "endfunction: do_unpack\n\n$0"
        ],
        "description": "Converts a bit format into the data object format."
    },

    "uvm_agent": {
        "prefix": "uvm_agent",
        "context": [
            "meta.class.systemverilog",
            "source.systemverilog"
        ],
        "body": [
          "class ${1:$WORKSPACE_NAME}_agent extends ${2:uvm_agent};",
          "    /* == Configuration Handle == */",
          "    $1_config cfg;",
          "    /* == Component Members == */",
          "    $1_sequencer  sqr;",
          "    $1_driver     drv;",
          "    $1_monitor    mon;",
          "    $1_coverage   cov;",
          "    /* == Analysis Ports == */",
          "    uvm_analysis_port #(${3:uvm_sequence_item}) ap;",
          "    /* == Component Fields == */",
          "    ${4}",
          "",
          "    `uvm_component_utils_begin($1_agent)",
          "        `uvm_field_object(cfg, UVM_ALL_ON)",
          "    `uvm_component_utils_end",
          "",
          "    function new(string name, uvm_component parent);",
          "        super.new(name, parent);",
          "    endfunction: new",
          "    ",
          "    /* == Phases == */",
          "    extern virtual function void  build_phase(uvm_phase phase);",
          "    extern virtual function void  connect_phase(uvm_phase phase);",
          "    extern virtual function void  start_of_simulation_phase(uvm_phase phase);",
          "endclass: $1_agent",
          "",
          "/* == Implementation == */",
          "",
          "function void $1_agent::build_phase(uvm_phase phase);",
          "    super.build_phase(phase);",
          "    if (cfg == null) begin",
          "        if (!uvm_config_db #($1_config)::get(this, \"\", \"cfg\", cfg)) begin",
          "            `uvm_fatal(\"CFG\", \"Missing configuration object!\")",
          "        end",
          "    end",
          "    uvm_config_db #($1_config)::set(this, \"*\", \"cfg\", cfg);",
          "",
          "    if (cfg.is_active) begin",
          "        drv = $1_driver::type_id::create(\"drv\", this);",
          "        sqr = $1_sequencer::type_id::create(\"sqr\", this);",
          "    end",
          "    mon = $1_monitor::type_id::create(\"mon\", this);",
          "",
          "    if (cfg.has_functional_coverage) begin",
          "        cov = $1_coverage::type_id::create(\"cov\", this);",
          "    end ",
          "endfunction: build_phase",
          "",
          "function void $1_agent::connect_phase(uvm_phase phase);",
          "    super.connect_phase(phase);",
          "",
          "    if (cfg.is_active) begin",
          "        drv.seq_item_port.connect(sqr.seq_item_export);",
          "        drv.rsp_port.connect(sqr.rsp_export);",
          "    end",
          "    ap = mon.ap;",
          "endfunction: connect_phase",
          "",
          "function void $1_agent::start_of_simulation_phase(uvm_phase phase);",
          "    super.start_of_simulation_phase(phase);",
          "endfunction: start_of_simulation_phase"
        ],
        "description": "uvm_agent"
      },
      "uvm_common": {
        "prefix": "uvm_common",
        "context": [
            "meta.class.systemverilog",
            "source.systemverilog"
        ],
        "body": [
          "/* == CONSTANTS for ${1:$WORKSPACE_NAME} == */",
          "${2}",
          "",
          "/* == TYPEDEFS and ENUMS ==*/",
          "${3}",
          "",
          "/* == METHODS == */",
          "${4}",
          "",
          "/* == CLASSES == */",
          "",
          "${5:`uvm_analysis_imp_decl(_item)};",
          "",
          "/* == OTHERS == */",
          "${6}"
        ],
        "description": "uvm_common"
      },
      "uvm_config": {
        "prefix": "uvm_config",
        "context": [
            "meta.class.systemverilog",
            "source.systemverilog"
        ],
        "body": [
          "class ${1:$WORKSPACE_NAME}_config extends uvm_object;",
          "    /* == Virtual Interface/s == */",
          "    virtual $1_intf vif;    ",
          "    /* == Register Model Handle == */",
          "    $1_reg_model rgm;",
          "    /* == Configuration Fields == */",
          "    // agent is active/passive",
          "    uvm_active_passive_enum is_active = UVM_ACTIVE;",
          "    // include the functional coverage or not",
          "    bit has_functional_coverage = 0;",
          "",
          "    `uvm_object_utils_begin($1_config)",
          "        `uvm_field_enum(uvm_active_passive_enum, is_active, UVM_ALL_ON)",
          "        `uvm_field_int(has_functional_coverage, UVM_ALL_ON)",
          "        `uvm_field_int(has_scoreboard, UVM_ALL_ON)",
          "    `uvm_object_utils_end",
          "",
          "    function new(string name = \"$1_config\");",
          "        super.new(name);",
          "    endfunction: new",
          "",
          "    /* == Constraints ==*/",
          "",
          "    /* == Methods == */",
          "    // extern function void pre_randomize();",
          "    // extern function void post_randomize();",
          "endclass: $1_config",
          "",
          "/* == Implementation == */",
          "",
          "// function void $1_config::pre_randomize();",
          "//    super.pre_randomize();",
          "// endfunction: pre_randomize",
          "",
          "// function void $1_config::post_randomize();",
          "//    super.post_randomize();",
          "// endfunction: post_randomize"
        ],
        "description": "uvm_config"
      },
      "uvm_coverage": {
        "prefix": "uvm_coverage",
        "context": [
            "meta.class.systemverilog",
            "source.systemverilog"
        ],
        "body": [
          "class ${1:$WORKSPACE_NAME}_coverage extends uvm_component;",
          "    /* == Configuration Handle == */",
          "    $1_config   cfg;",
          "    /* == Component Fields == */",
          "    bit coverages_enable = 'b1;",
          "",
          "    `uvm_component_utils_begin($1_coverage)",
          "        `uvm_field_object(cfg, UVM_ALL_ON)",
          "        `uvm_field_int(coverages_enable, UVM_DEFAULT + UVM_BIN)",
          "    `uvm_component_utils_end",
          "    ",
          "    /* == Cover Group == */",
          "    covergroup cg_transaction;",
          "        options.per_instance = 1;",
          "        // TODO: add cover points",
          "        //cp_XXX: coverpoint XXX;",
          "        //cross_XXX: cross XXX, YYY;",
          "    endgroup: cg",
          "    ",
          "    function new(string name, uvm_component parent = null);",
          "        super.new(name, parent);",
          "        cg_transaction = new;",
          "        cg_transaction.set_inst_name({get_full_name(), \".cg_transaction\"});",
          "    endfunction: new",
          "   ",
          "    /* == Phases == */ ",
          "    extern virtual function void build_phase(uvm_phase phase);",
          "    /* == Methods == */",
          "    extern virtual function void sample({:TRANSACTION:} cover_item);",
          "endclass",
          "",
          "/* == Implementation == */",
          "",
          "function void $1_coverage::build_phase(uvm_phase phase);",
          "    super.build_phase(phase);",
          "    if (cfg == null) begin",
          "        if (!uvm_config_db #($1_config)::get(this, \"\", \"cfg\", cfg)) begin",
          "            `uvm_fatal(\"CFG\", \"Missing configuration object!\")",
          "        end",
          "    end",
          "endfunction: build_phase",
          "",
          "function void $1_coverage::sample({:TRANSACTION:} cover_item);",
          "    if (coverages_enable) cg_transaction.sample();",
          "endfunction: sample"
        ],
        "description": "uvm_coverage"
      },
      "uvm_driver": {
        "prefix": "uvm_driver",
        "context": [
            "meta.class.systemverilog",
            "source.systemverilog"
        ],
        "body": [
          "class ${1:$WORKSPACE_NAME}_driver extends uvm_driver #(${2:uvm_sequence_item});",
          "    /* == Configuration Handle == */",
          "    $1_config cfg;",
          "    /* == Virtual Interface == */",
          "    virtual $1_intf vif;",
          "    /* == Component Fields == */ ",
          "",
          "    `uvm_component_utils_begin($1_driver)",
          "        `uvm_field_object(cfg, UVM_ALL_ON)",
          "    `uvm_component_utils_end",
          "",
          "    function new(string name, uvm_component parent = null);",
          "        super.new(name, parent);",
          "    endfunction: new    ",
          "",
          "    /* == Phases == */",
          "    extern virtual function void    build_phase(uvm_phase phase);",
          "    extern virtual function void    connect_phase(uvm_phase phase);",
          "    extern virtual task             run_phase(uvm_phase phase);",
          "    /* == Methods == */ ",
          "    extern virtual task init(uvm_phase phase); ",
          "    extern virtual task drive_item(REQ req, RSP rsp);",
          "endclass : $1_driver",
          "",
          "/* == Implementation == */",
          "",
          "function void $1_driver::build_phase(uvm_phase phase);",
          "    super.build_phase(phase);",
          "    if (cfg == null) begin",
          "        if (!uvm_config_db #($1_config)::get(this, \"\", \"cfg\", cfg)) begin",
          "            `uvm_fatal(\"CFG\", \"Missing configuration object!\")",
          "        end",
          "    end",
          "endfunction : build_phase",
          "",
          "function void $1_driver::connect_phase(uvm_phase phase);",
          "    super.connect_phase(phase);",
          "    vif = cfg.vif;",
          "endfunction : connect_phase",
          "",
          "task $1_driver::run_phase(uvm_phase phase);",
          "    init(phase);",
          "    forever begin",
          "        REQ req;",
          "        RSP rsp;",
          "",
          "        seq_item_port.get_next_item(req);",
          "        drive_item(req, rsp);",
          "        seq_item_port.item_done(rsp);",
          "    end",
          "endtask : run_phase",
          "",
          "task $1_driver::init(uvm_phase phase);",
          "    // TODO - drive default values",
          "endtask : init",
          "",
          "task $1_driver::drive_item(REQ req, RSP rsp);",
          "    // TODO - drive pins",
          "endtask : drive_item"
        ],
        "description": "uvm_driver"
      },
      "uvm_env": {
        "prefix": "uvm_env",
        "context": [
            "meta.class.systemverilog",
            "source.systemverilog"
        ],
        "body": [
          "class ${1:$WORKSPACE_NAME}_env extends uvm_env;",
          "    /* == Configuration Handle == */",
          "    $1_config cfg;",
          "    /* == Component Members == */",
          "    $1_agent agent;",
          "    /* == Component Fields == */",
          "",
          "    `uvm_component_utils_begin($1_env)",
          "        `uvm_field_object(cfg, UVM_ALL_ON)",
          "    `uvm_component_utils_end",
          "    ",
          "    function new(string name, uvm_component parent);",
          "        super.new(name, parent);",
          "    endfunction: new",
          "   ",
          "    /* == Phases == */ ",
          "    extern virtual function void    build_phase(uvm_phase phase);",
          "    extern virtual function void    connect_phase(uvm_phase phase);",
          "    extern virtual function void    end_of_elaboration_phase(uvm_phase phase);",
          "endclass : $1_env",
          "",
          "/* == Implementation == */",
          "",
          "function void $1_env::build_phase(uvm_phase phase);",
          "    super.build_phase(phase);",
          "    if (cfg == null) begin",
          "        if (!uvm_config_db #($1_config)::get(this, \"\", \"cfg\", cfg)) begin",
          "            `uvm_fatal(\"CFG\", \"Missing configuration object!\")",
          "        end",
          "    end",
          "    uvm_config_db #($1_config)::set(this, \"*\", \"cfg\", cfg);",
          "",
          "    agent = $1_agent::type_id::create(\"agent\", this);",
          "endfunction: build_phase",
          "",
          "function void $1_env::connect_phase(uvm_phase phase);",
          "    super.connect_phase(phase);",
          "endfunction: connect_phase",
          "",
          "function void $1_env::end_of_elaboration_phase(uvm_phase phase);",
          "    super.end_of_elaboration_phase(phase);",
          "endfunction: end_of_elaboration_phase"
        ],
        "description": "uvm_env"
      },
      "uvm_intf": {
        "prefix": "uvm_intf",
        "context": [
            "meta.class.systemverilog",
            "source.systemverilog"
        ],
        "body": [
          "interface ${1:$WORKSPACE_NAME}_intf ",
          "(",
          "    ${2:/*TODO:port_list*/}",
          ");",
          "    /* == Signal List == */",
          "    logic clk;",
          "    logic reset_n;",
          "",
          "    /* == Clocking Blocks == */",
          "",
          "    /* == ModPorts == */",
          "",
          "    /* == Assertions == */",
          "",
          "endinterface: $1_intf ",
          ""
        ],
        "description": "uvm_intf"
      },
      "uvm_monitor": {
        "prefix": "uvm_monitor",
        "context": [
            "meta.class.systemverilog",
            "source.systemverilog"
        ],
        "body": [
          "class ${1:$WORKSPACE_NAME}_monitor extends uvm_monitor;",
          "    /* == Configuration Handle == */",
          "    $1_config cfg; ",
          "    /* == Analysis Ports == */",
          "    uvm_analysis_port #(${2:uvm_sequence_item:}) ap;",
          "    /* == Virtual Interface == */",
          "    virtual $1_intf vif;",
          "    /* == Component Fields == */",
          "",
          "    `uvm_component_utils_begin($1_monitor)",
          "        `uvm_field_object(cfg, UVM_ALL_ON)",
          "    `uvm_component_utils_end",
          "",
          "    function new(string name, uvm_component parent );",
          "        super.new(name, parent);",
          "        ap = new(\"ap\", this);",
          "    endfunction: new",
          "    ",
          "    /* == Phases == */",
          "    extern virtual function void    build_phase(uvm_phase phase);",
          "    extern virtual function void    connect_phase(uvm_phase phase);",
          "    extern virtual task             run_phase(uvm_phase phase);",
          "    /* == Methods == */",
          "    extern virtual task collect_transactions(uvm_phase phase);",
          "endclass: $1_monitor",
          "",
          "/* == Implementation == */",
          "",
          "function void $1_monitor::build_phase(uvm_phase phase);",
          "    super.build_phase(phase);",
          "    if (cfg == null) begin",
          "        if (!uvm_config_db #($1_config)::get(this, \"\", \"cfg\", cfg)) begin",
          "            `uvm_fatal(\"CFG\", \"Missing configuration object!\")",
          "        end",
          "    end",
          "endfunction: build_phase",
          "",
          "function void $1_monitor::connect_phase(uvm_phase phase);",
          "    super.connect_phase(phase);",
          "    vif = cfg.vif;",
          "endfunction: connect_phase",
          "",
          "task $1_monitor::run_phase(uvm_phase phase);",
          "    super.run_phase(phase);",
          "    fork ",
          "        collect_transactions(phase);",
          "    join",
          "endtask: run_phase",
          "",
          "task $1_monitor::collect_transactions(uvm_phase phase);",
          "    forever begin",
          "        // TODO - sample pins",
          "        #10ns;",
          "    end",
          "endtask: collect_transactions",
          ""
        ],
        "description": "uvm_monitor"
      },
      "uvm_package": {
        "prefix": "uvm_package",
        "context": [
            "meta.class.systemverilog",
            "source.systemverilog"
        ],
        "body": [
          "// Package: $1",
          "// TODO: add description",
          "package ${1:$TM_FILENAME_BASE};",
          "    import uvm_pkg::*;",
          "    `include \"uvm_macros.svh\"",
          "    ",
          "    `include \"${2:$WORKSPACE_NAME}_common.svh\"",
          "    `include \"$2_config.svh\"",
          " ",
          "    `include \"$2_item.svh\"",
          "    `include \"$2_coverage.svh\"  ",
          "    `include \"$2_monitor.svh\"",
          "    `include \"$2_sequencer.svh\"",
          "    `include \"$2_driver.svh\"",
          "    `include \"$2_agent.svh\"",
          "    `include \"$2_env.svh\"",
          "    ",
          "    `include \"$2_seq_lib.svh\"",
          "endpackage: $1"
        ],
        "description": "uvm_package"
      },
      "uvm_scoreboard": {
        "prefix": "uvm_scoreboard",
        "context": [
            "meta.class.systemverilog",
            "source.systemverilog"
        ],
        "body": [
          "class ${1:$WORKSPACE_NAME}_scoreboard extends uvm_scoreboard;",
          "    /* == Configuration Handle == */",
          "    $1_config cfg;",
          "    /* == Analysis Ports == */",
          "    uvm_analysis_imp_item#(${2:uvm_sequence_item}, $1_scoreboard) aimp_item;",
          "    /* == Component Fields == */ ",
          "    bit checks_enable = 'b1;",
          "",
          "    `uvm_component_utils_begin($1_scoreboard)",
          "        `uvm_field_object(cfg, UVM_ALL_ON)",
          "        `uvm_field_int(check_enable, UVM_DEFAULT + UVM_BIN)",
          "    `uvm_component_utils_end",
          "",
          "    function new (string name, uvm_component parent = null);",
          "        super.new(name, parent);",
          "        aimp_item = new(\"aimp_item\", this);",
          "    endfunction: new",
          "    ",
          "    /* == Phases == */",
          "    extern virtual function void    build_phase(uvm_phase phase);",
          "    extern virtual function void    connect_phase(uvm_phase phase);",
          "    extern virtual task             run_phase(uvm_phase phase);",
          "    extern virtual function void    extract_phase(uvm_phase phase);",
          "    extern virtual function void    check_phase(uvm_phase phase);",
          "    extern virtual function void    report_phase(uvm_phase phase); ",
          "    /* == Methods == */",
          "    extern virtual function void write_item({:TRANSACTION:} item);",
          "endclass: $1_scoreboard",
          "",
          "/* == Implementation == */",
          "",
          "function void $1_scoreboard::build_phase(uvm_phase phase);",
          "    super.build_phase(phase);",
          "    if (cfg == null) begin",
          "        if (!uvm_config_db #($1_config)::get(this, \"\", \"cfg\", cfg)) begin",
          "            `uvm_fatal(\"CFG\", \"Missing configuration object!\")",
          "        end",
          "    end ",
          "endfunction: build_phase",
          "",
          "function void $1_scoreboard::connect_phase(uvm_phase phase);",
          "    super.connect_phase(phase);",
          "endfunction: connect_phase",
          "",
          "task $1_scoreboard::run_phase(uvm_phase phase);",
          "    super.run_phase(phase);",
          "endtask: run_phase",
          "",
          "function void $1_scoreboard::extract_phase(uvm_phase phase);",
          "    super.extract_phase(phase);",
          "endfunction: extract_phase",
          "",
          "function void $1_scoreboard::check_phase(uvm_phase phase);",
          "    super.check_phase(phase);",
          "endfunction: check_phase",
          "",
          "function void $1_scoreboard::report_phase(uvm_phase phase);",
          "    super.report_phase(phase);",
          "endfunction: report_phase",
          "",
          "function void $1_scoreboard::write_item({:TRANSACTION:} item);",
          "    // TODO: implement scoreboard",
          "endfunction: write_item"
        ],
        "description": "uvm_scoreboard"
      },
      "uvm_base_seq": {
        "prefix": "uvm_base_seq",
        "context": [
            "meta.class.systemverilog",
            "source.systemverilog"
        ],
        "body": [
          "class ${1:$WORKSPACE_NAME}_base_seq extends ${2:uvm_sequence};",
          "    `uvm_object_utils($1_base_seq)",
          "",
          "    function new (string name=\"$1_base_seq\");",
          "        super.new(name);",
          "    endfunction: new",
          "",
          "    /* == Methods == */",
          "    extern virtual task pre_start;",
          "    extern virtual task post_start;",
          "endclass: $1_base_seq",
          "",
          "/* == Implementation == */",
          "",
          "task $1_base_seq::pre_start;",
          "    uvm_info(get_type_name(), \"SEQ_BEGIN\", UVM_LOW) ",
          "    if (starting_phase != null) begin",
          "        `uvm_info(get_type_name(),",
          "                  $sformatf(\"%s pre_start() raising %s objection\",",
          "                    get_sequence_path(), starting_phase.get_name()),",
          "                  UVM_MEDIUM)",
          "        starting_phase.raise_objection(this, get_type_name());",
          "    end",
          "endtask : pre_start",
          "",
          "task $1_base_seq::post_start;",
          "    if (starting_phase != null) begin",
          "        `uvm_info(get_type_name(),",
          "                  $sformatf(\"%s post_start() dropping %s objection\",",
          "                    get_sequence_path(), starting_phase.get_name()),",
          "                  UVM_MEDIUM)",
          "        starting_phase.drop_objection(this, get_type_name());",
          "    end",
          "    uvm_info(get_type_name(), \"SEQ_END\", UVM_LOW) ",
          "endtask : post_start",
          ""
        ],
        "description": "uvm_base_seq"
      },
      "uvm_seq": {
        "prefix": "uvm_seq",
        "context": [
            "meta.class.systemverilog",
            "source.systemverilog"
        ],
        "body": [
          "class ${1:$WORKSPACE_NAME}_seq extends ${2:uvm_sequence:};",
          "    /* == Sequence Items == */",
          "     ",
          "    `uvm_object_utils_begin($1_seq)",
          "    `uvm_object_utils_end  ",
          "",
          "    function new (string name=\"$1_seq\");",
          "        super.new(name);",
          "    endfunction: new",
          "",
          "    /* == Constraints == */",
          "",
          "    /* == Methods == */",
          "    extern virtual task body;",
          "endclass: $1_seq",
          "",
          "/* == Implementation == */",
          "",
          "task $1_seq::body;",
          "",
          "endtask: body"
        ],
        "description": "uvm_seq"
      },
      "uvm_sequencer": {
        "prefix": "uvm_sequencer",
        "context": [
            "meta.class.systemverilog",
            "source.systemverilog"
        ],
        "body": [
          "class ${1:$WORKSPACE_NAME}_sequencer extends uvm_sequencer #(${2:uvm_sequencer});",
          "    /* == Configuration Handle == */",
          "    $1_config cfg;",
          "    /* == Component Fields == */",
          "",
          "    `uvm_component_utils_begin($1_sequencer)",
          "        `uvm_field_object(cfg, UVM_ALL_ON)",
          "    `uvm_component_utils_end",
          "",
          "    function new(string name, uvm_component parent);",
          "        super.new(name, parent);",
          "    endfunction: new",
          "    ",
          "    /* == Phases == */",
          "    extern virtual function void    build_phase(uvm_phase phase);",
          "endclass: $1_sequencer ",
          "",
          "/* == Implementation == */",
          "",
          "function void $1_sequencer::build_phase(uvm_phase phase);",
          "    super.build_phase(phase);",
          "    if (cfg == null) begin",
          "        if (!uvm_config_db #($1_config)::get(this, \"\", \"cfg\", cfg)) begin",
          "            `uvm_fatal(get_type_name(), \"Missing configuration object!\")",
          "        end",
          "    end",
          "endfunction: build_phase",
          ""
        ],
        "description": "uvm_sequencer"
      },
      "uvm_base_test": {
        "prefix": "uvm_base_test",
        "context": [
            "meta.class.systemverilog",
            "source.systemverilog"
        ],
        "body": [
          "class ${1:$WORKSPACE_NAME}_base_test extends ${2:uvm_test};",
          "    `uvm_component_utils($1_base_test)",
          "",
          "    /* == Top Level Configuration/s == */",
          "    $1_config     cfg;",
          "    /* == Top Level Environment/s == */",
          "    $1_env        env;",
          "    /* == Top Level Register Model/s == */",
          "    $1_reg_model  rgm;",
          "    /* == Top Level Sequence/s == */",
          "    // TODO: declare common top level sequence/s",
          "    /* == Component Fields == */",
          "    const time run_phase_drain_time = 100ns;",
          "",
          "    function new(string name = \"$1_base_test\", uvm_component parent = null);",
          "        super.new(name, parent);",
          "    endfunction: new",
          "    ",
          "    /* == Phases == */",
          "    extern virtual function void    build_phase(uvm_phase phase);",
          "    extern virtual function void    connect_phase(uvm_phase phase);",
          "    extern virtual task             run_phase(uvm_phase phase);",
          "",
          "    /* == Methods == */",
          "    extern protected virtual function void override_uvm();",
          "    extern protected virtual function void setup_configurations();",
          "    extern protected virtual function void configure_testbench();",
          "    extern protected virtual function void configure_reg_model();",
          "    extern protected virtual function void setup_interfaces();",
          "    /* == Main Methods == */",
          "    extern protected virtual task main();",
          "endclass: $1_base_test",
          "",
          "/* == Implementation == */",
          "",
          "function void $1_base_test::build_phase(uvm_phase phase);",
          "    super.build_phase(phase);",
          "    // overrides before building",
          "    override_uvm();",
          "    // build config",
          "    cfg = $1_config::type_id::create(\"cfg\", this);",
          "    if (!randomize(cfg)) `uvm_fatal(\"RAND\", \"Failed configuration object randomization!\");",
          "    setup_configurations();",
          "    // build environment",
          "    uvm_config_db#($1_config)::set(this, \"env\", \"cfg\", cfg);",
          "    env = $1_env::type_id::create(\"env\", this);",
          "    configure_testbench();",
          "    // build register model",
          "    rgm = $1_reg_model::type_id::create(\"rgm\");",
          "    configure_reg_model();",
          "    // get/set interface",
          "    setup_interfaces();",
          "endfunction: build_phase",
          "",
          "function void $1_base_test::connect_phase(uvm_phase phase);",
          "    super.connect_phase(phase);",
          "    // TODO: connect downstream    ",
          "endfunction: connect_phase",
          "",
          "task $1_base_test::run_phase(uvm_phase phase);",
          "    super.run_phase;",
          "    // set-up drain time, to avoid abrupt end of test",
          "    phase.phase_done.set_drain_time(this, run_phase_drain_time);",
          "    // run main method",
          "    phase.raise_objection(this, {get_type_name(), \".main() started\"});",
          "    main();",
          "    phase.drop_objection(this, {get_type_name(), \".main ended\"})",
          "endtask: run_phase",
          "",
          "// this function is called as the very first build step of the ais_uvm_test base class",
          "function void $1_base_test::override_uvm();",
          "    super.override_uvm();",
          "    // TODO: set type overrides",
          "    // TODO: set instance overrides",
          "endfunction: override_uvm",
          "",
          "// this function is used update configuration object",
          "function void $1_base_test:setup_configurations();",
          "    // TODO: set configuration/s",
          "endfunction: setup_configurations",
          "",
          "// this function is used to insert testbecnh configuration steps after build",
          "function void $1_base_test::configure_testbench();",
          "    // TODO: set testbench",
          "endfunction: configure_testbench",
          "",
          "// this function is used to get/set virtual interfaces",
          "function void $1_base_test::setup_interfaces();",
          "    // get/set harness interface",
          "    if(!uvm_config_db#(virtual $1_interface)::get(this, \"\", \"$1_if\", cfg.vif)) begin",
          "        `uvm_fatal(get_type_name(), {\"$1_if\", \" virtual interface not found!\"});",
          "    end",
          "   // TODO: get/set other interfaces ",
          "endfunction: setup_interfaces",
          "",
          "// this function implements the individual test steps",
          "task $1_base_test::main();",
          "    `uvm_fatal(get_type_name(), \"Main Method not implemented!\") ",
          "endtask: main"
        ],
        "description": "uvm_base_test"
      },
      "uvm_test": {
        "prefix": "uvm_test",
        "body": [
          "class ${1:TM_FILENAME_BASE} extends ${2:$WORKSPACE_NAME}_base_test;",
          "    `uvm_component_utils($1_test)",
          "    ",
          "    /* == Test Sequence/s == */",
          "    // TODO: declare test sequence/s",
          "",
          "    function new(string name = \"$1\", uvm_component parent = null);",
          "        super.new(name, parent);",
          "    endfunction: new",
          "    ",
          "    /* == Base Test Methods == */",
          "    extern protected virtual function void override_uvm();",
          "    /* == Main == */",
          "    extern protected virtual task main();",
          "endclass: $1",
          "",
          "/* == Implementation == */",
          "",
          "function void $1::override_uvm();",
          "    super.override_uvm();",
          "endfunction: override_uvm",
          "",
          "task $1::main();",
          "    // TODO: implement test",
          "endtask: main"
        ],
        "description": "uvm_test"
      },
      "uvm_transaction": {
        "prefix": "uvm_transaction",
        "body": [
          "class ${1:$WORKSPACE_NAME}_item extends uvm_sequence_item;",
          "    /* == Transaction Fields == */",
          "",
          "    `uvm_object_utils_begin($1_item)",
          "    `uvm_object_utils_end",
          "    ",
          "    function new(string name=\"$1_item\");",
          "      super.new(name);",
          "    endfunction: new",
          "    ",
          "    /* == Constraints == */",
          "",
          "    /* == Methods == */",
          "    // extern function void pre_randomize();",
          "    // extern function void post_randomize();",
          "endclass: $1_item",
          "",
          "/* == Implementation == */",
          "",
          "// function void $1_item::pre_randomize();",
          "//    super.pre_randomize();",
          "// endfunction: pre_randomize",
          "",
          "// function void $1_item::post_randomize();",
          "//    super.post_randomize();",
          "// endfunction: post_randomize"
        ],
        "description": "uvm_transaction"
      }
}
